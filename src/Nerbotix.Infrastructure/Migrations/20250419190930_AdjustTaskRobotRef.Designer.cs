// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Nerbotix.Infrastructure.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Nerbotix.Infrastructure.Migrations
{
    [DbContext(typeof(NerbotixDbContext))]
    [Migration("20250419190930_AdjustTaskRobotRef")]
    partial class AdjustTaskRobotRef
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Nerbotix.Domain.Capabilities.Capability", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("capabilities", (string)null);
                });

            modelBuilder.Entity("Nerbotix.Domain.Capabilities.CapabilityGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("capability_groups", (string)null);
                });

            modelBuilder.Entity("Nerbotix.Domain.Capabilities.RobotCapability", b =>
                {
                    b.Property<Guid>("RobotId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CapabilityId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("RobotId", "CapabilityId");

                    b.HasIndex("CapabilityId");

                    b.ToTable("robots_capabilities", (string)null);
                });

            modelBuilder.Entity("Nerbotix.Domain.Chatting.Chat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("chats", (string)null);
                });

            modelBuilder.Entity("Nerbotix.Domain.Chatting.ChatMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("boolean");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.ToTable("chat_messages", (string)null);
                });

            modelBuilder.Entity("Nerbotix.Domain.Chatting.ChatUser", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId", "ChatId");

                    b.HasIndex("ChatId");

                    b.ToTable("chats_users", (string)null);
                });

            modelBuilder.Entity("Nerbotix.Domain.Logging.Log", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("RobotId")
                        .HasColumnType("uuid");

                    b.Property<int>("Scope")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("RobotId");

                    b.HasIndex("TaskId");

                    b.ToTable("logs", (string)null);
                });

            modelBuilder.Entity("Nerbotix.Domain.Robots.Robot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastActivity")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TenantId", "Name")
                        .IsUnique();

                    b.ToTable("robots", (string)null);
                });

            modelBuilder.Entity("Nerbotix.Domain.Robots.RobotCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("LinearOptimizationMaximization")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Name")
                        .IsUnique();

                    b.ToTable("robot_categories", (string)null);
                });

            modelBuilder.Entity("Nerbotix.Domain.Robots.RobotCommunication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RobotId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("RobotId")
                        .IsUnique();

                    b.ToTable("robot_communications", (string)null);

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Nerbotix.Domain.Robots.RobotCustomProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RobotId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RobotId", "Name")
                        .IsUnique();

                    b.ToTable("robot_custom_properties", (string)null);
                });

            modelBuilder.Entity("Nerbotix.Domain.Robots.RobotProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Factor")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("Unit")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("robot_category_properties", (string)null);
                });

            modelBuilder.Entity("Nerbotix.Domain.Robots.RobotPropertyValue", b =>
                {
                    b.Property<Guid>("RobotId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("RobotId", "PropertyId");

                    b.HasIndex("PropertyId");

                    b.ToTable("robot_properties_values", (string)null);
                });

            modelBuilder.Entity("Nerbotix.Domain.Tasks.Data.RobotTaskData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("task_data", (string)null);
                });

            modelBuilder.Entity("Nerbotix.Domain.Tasks.Data.RobotTaskFiles", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TaskId")
                        .IsUnique();

                    b.ToTable("task_archives", (string)null);
                });

            modelBuilder.Entity("Nerbotix.Domain.Tasks.RobotTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("AssignedRobotId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CompletedRobotId")
                        .HasColumnType("uuid");

                    b.Property<double>("Complexity")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<TimeSpan?>("EstimatedDuration")
                        .HasColumnType("interval");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AssignedRobotId");

                    b.HasIndex("CategoryId");

                    b.ToTable("robot_tasks", (string)null);
                });

            modelBuilder.Entity("Nerbotix.Domain.Tasks.RobotTaskRequirement", b =>
                {
                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CapabilityId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("RequiredLevel")
                        .HasColumnType("integer");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("TaskId", "CapabilityId");

                    b.HasIndex("CapabilityId");

                    b.ToTable("task_requirements", (string)null);
                });

            modelBuilder.Entity("Nerbotix.Domain.Tenants.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("Name", "GroupId")
                        .IsUnique();

                    b.ToTable("permissions", (string)null);
                });

            modelBuilder.Entity("Nerbotix.Domain.Tenants.PermissionGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Name")
                        .IsUnique();

                    b.ToTable("permission_groups", (string)null);
                });

            modelBuilder.Entity("Nerbotix.Domain.Tenants.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.HasIndex("TenantId");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("Nerbotix.Domain.Tenants.RolePermission", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("roles_permissions", (string)null);
                });

            modelBuilder.Entity("Nerbotix.Domain.Tenants.Settings.TenantSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("TenantId")
                        .IsUnique();

                    b.ToTable("tenant_settings", (string)null);
                });

            modelBuilder.Entity("Nerbotix.Domain.Tenants.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("tenants", (string)null);
                });

            modelBuilder.Entity("Nerbotix.Domain.Tenants.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("RefreshTokenExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("TenantId");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Nerbotix.Domain.Tenants.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("TenantId");

                    b.ToTable("users_roles", (string)null);
                });

            modelBuilder.Entity("Nerbotix.Domain.Robots.Communications.HttpCommunication", b =>
                {
                    b.HasBaseType("Nerbotix.Domain.Robots.RobotCommunication");

                    b.Property<string>("ApiEndpoint")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Headers")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HttpMethod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Nerbotix.Domain.Robots.Communications.MqttCommunication", b =>
                {
                    b.HasBaseType("Nerbotix.Domain.Robots.RobotCommunication");

                    b.Property<string>("MqttBrokerAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MqttBrokerPassword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MqttBrokerUsername")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MqttTopic")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Nerbotix.Domain.Tenants.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Nerbotix.Domain.Tenants.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Nerbotix.Domain.Tenants.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Nerbotix.Domain.Tenants.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Nerbotix.Domain.Capabilities.Capability", b =>
                {
                    b.HasOne("Nerbotix.Domain.Capabilities.CapabilityGroup", "Group")
                        .WithMany("Capabilities")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Nerbotix.Domain.Capabilities.RobotCapability", b =>
                {
                    b.HasOne("Nerbotix.Domain.Capabilities.Capability", "Capability")
                        .WithMany("Robots")
                        .HasForeignKey("CapabilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nerbotix.Domain.Robots.Robot", "Robot")
                        .WithMany("Capabilities")
                        .HasForeignKey("RobotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Capability");

                    b.Navigation("Robot");
                });

            modelBuilder.Entity("Nerbotix.Domain.Chatting.Chat", b =>
                {
                    b.HasOne("Nerbotix.Domain.Tenants.Tenant", null)
                        .WithMany("Chats")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Nerbotix.Domain.Chatting.ChatMessage", b =>
                {
                    b.HasOne("Nerbotix.Domain.Chatting.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");
                });

            modelBuilder.Entity("Nerbotix.Domain.Chatting.ChatUser", b =>
                {
                    b.HasOne("Nerbotix.Domain.Chatting.Chat", "Chat")
                        .WithMany("Users")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nerbotix.Domain.Tenants.User", "User")
                        .WithMany("Chats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Nerbotix.Domain.Logging.Log", b =>
                {
                    b.HasOne("Nerbotix.Domain.Robots.Robot", "Robot")
                        .WithMany("Logs")
                        .HasForeignKey("RobotId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nerbotix.Domain.Tasks.RobotTask", "Task")
                        .WithMany("Logs")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Robot");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Nerbotix.Domain.Robots.Robot", b =>
                {
                    b.HasOne("Nerbotix.Domain.Robots.RobotCategory", "Category")
                        .WithMany("Robots")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Nerbotix.Domain.Robots.RobotLocation", "Location", b1 =>
                        {
                            b1.Property<Guid>("RobotId")
                                .HasColumnType("uuid");

                            b1.Property<double>("Latitude")
                                .HasColumnType("double precision");

                            b1.Property<double>("Longitude")
                                .HasColumnType("double precision");

                            b1.Property<DateTimeOffset>("Timestamp")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("RobotId");

                            b1.ToTable("robots");

                            b1.WithOwner()
                                .HasForeignKey("RobotId");
                        });

                    b.Navigation("Category");

                    b.Navigation("Location")
                        .IsRequired();
                });

            modelBuilder.Entity("Nerbotix.Domain.Robots.RobotCommunication", b =>
                {
                    b.HasOne("Nerbotix.Domain.Robots.Robot", "Robot")
                        .WithOne("Communication")
                        .HasForeignKey("Nerbotix.Domain.Robots.RobotCommunication", "RobotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Robot");
                });

            modelBuilder.Entity("Nerbotix.Domain.Robots.RobotCustomProperty", b =>
                {
                    b.HasOne("Nerbotix.Domain.Robots.Robot", "Robot")
                        .WithMany("CustomProperties")
                        .HasForeignKey("RobotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Robot");
                });

            modelBuilder.Entity("Nerbotix.Domain.Robots.RobotProperty", b =>
                {
                    b.HasOne("Nerbotix.Domain.Robots.RobotCategory", "Category")
                        .WithMany("Properties")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Nerbotix.Domain.Robots.RobotPropertyValue", b =>
                {
                    b.HasOne("Nerbotix.Domain.Robots.RobotProperty", "Property")
                        .WithMany("Values")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nerbotix.Domain.Robots.Robot", "Robot")
                        .WithMany("Properties")
                        .HasForeignKey("RobotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");

                    b.Navigation("Robot");
                });

            modelBuilder.Entity("Nerbotix.Domain.Tasks.Data.RobotTaskData", b =>
                {
                    b.HasOne("Nerbotix.Domain.Tasks.RobotTask", "Task")
                        .WithMany("TaskData")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Nerbotix.Domain.Tasks.Data.RobotTaskFiles", b =>
                {
                    b.HasOne("Nerbotix.Domain.Tasks.RobotTask", "Task")
                        .WithOne("Archive")
                        .HasForeignKey("Nerbotix.Domain.Tasks.Data.RobotTaskFiles", "TaskId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Nerbotix.Domain.Tasks.RobotTask", b =>
                {
                    b.HasOne("Nerbotix.Domain.Robots.Robot", "AssignedRobot")
                        .WithMany("TasksQueue")
                        .HasForeignKey("AssignedRobotId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Nerbotix.Domain.Robots.RobotCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("AssignedRobot");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Nerbotix.Domain.Tasks.RobotTaskRequirement", b =>
                {
                    b.HasOne("Nerbotix.Domain.Capabilities.Capability", "Capability")
                        .WithMany()
                        .HasForeignKey("CapabilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nerbotix.Domain.Tasks.RobotTask", "Task")
                        .WithMany("Requirements")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Capability");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Nerbotix.Domain.Tenants.Permission", b =>
                {
                    b.HasOne("Nerbotix.Domain.Tenants.PermissionGroup", "Group")
                        .WithMany("Permissions")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Nerbotix.Domain.Tenants.PermissionGroup", b =>
                {
                    b.HasOne("Nerbotix.Domain.Tenants.Tenant", null)
                        .WithMany("PermissionGroups")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Nerbotix.Domain.Tenants.Role", b =>
                {
                    b.HasOne("Nerbotix.Domain.Tenants.Tenant", "Tenant")
                        .WithMany("Roles")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Nerbotix.Domain.Tenants.RolePermission", b =>
                {
                    b.HasOne("Nerbotix.Domain.Tenants.Permission", "Permission")
                        .WithMany("Roles")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nerbotix.Domain.Tenants.Role", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Nerbotix.Domain.Tenants.Settings.TenantSettings", b =>
                {
                    b.HasOne("Nerbotix.Domain.Tenants.Tenant", null)
                        .WithOne("Settings")
                        .HasForeignKey("Nerbotix.Domain.Tenants.Settings.TenantSettings", "TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Nerbotix.Domain.Tenants.Settings.Algorithms.TenantAlgorithmSettings", "AlgorithmSettings", b1 =>
                        {
                            b1.Property<Guid>("TenantSettingsId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<string>("PreferredAlgorithm")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<Guid>("TenantId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime?>("UpdatedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("TenantSettingsId");

                            b1.ToTable("tenant_settings");

                            b1.WithOwner()
                                .HasForeignKey("TenantSettingsId");

                            b1.OwnsOne("Nerbotix.Domain.Tenants.Settings.Algorithms.TenantAntColonyAlgorithmSettings", "AntColonyAlgorithmSettings", b2 =>
                                {
                                    b2.Property<Guid>("TenantAlgorithmSettingsTenantSettingsId")
                                        .HasColumnType("uuid");

                                    b2.Property<double>("Alpha")
                                        .HasColumnType("double precision");

                                    b2.Property<int>("AntCount")
                                        .HasColumnType("integer");

                                    b2.Property<double>("Beta")
                                        .HasColumnType("double precision");

                                    b2.Property<double>("Evaporation")
                                        .HasColumnType("double precision");

                                    b2.Property<int>("Iterations")
                                        .HasColumnType("integer");

                                    b2.HasKey("TenantAlgorithmSettingsTenantSettingsId");

                                    b2.ToTable("tenant_settings");

                                    b2.WithOwner()
                                        .HasForeignKey("TenantAlgorithmSettingsTenantSettingsId");
                                });

                            b1.OwnsOne("Nerbotix.Domain.Tenants.Settings.Algorithms.TenantGeneticAlgorithmSettings", "GeneticAlgorithmSettings", b2 =>
                                {
                                    b2.Property<Guid>("TenantAlgorithmSettingsTenantSettingsId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("Generations")
                                        .HasColumnType("integer");

                                    b2.Property<double>("MutationRate")
                                        .HasColumnType("double precision");

                                    b2.Property<int>("PopulationSize")
                                        .HasColumnType("integer");

                                    b2.HasKey("TenantAlgorithmSettingsTenantSettingsId");

                                    b2.ToTable("tenant_settings");

                                    b2.WithOwner()
                                        .HasForeignKey("TenantAlgorithmSettingsTenantSettingsId");
                                });

                            b1.OwnsOne("Nerbotix.Domain.Tenants.Settings.Algorithms.TenantLoadBalancingAlgorithmSettings", "LoadBalancingAlgorithmSettings", b2 =>
                                {
                                    b2.Property<Guid>("TenantAlgorithmSettingsTenantSettingsId")
                                        .HasColumnType("uuid");

                                    b2.Property<double>("ComplexityFactor")
                                        .HasColumnType("double precision");

                                    b2.HasKey("TenantAlgorithmSettingsTenantSettingsId");

                                    b2.ToTable("tenant_settings");

                                    b2.WithOwner()
                                        .HasForeignKey("TenantAlgorithmSettingsTenantSettingsId");
                                });

                            b1.OwnsOne("Nerbotix.Domain.Tenants.Settings.Algorithms.TenantSimulatedAnnealingAlgorithmSettings", "SimulatedAnnealingAlgorithmSettings", b2 =>
                                {
                                    b2.Property<Guid>("TenantAlgorithmSettingsTenantSettingsId")
                                        .HasColumnType("uuid");

                                    b2.Property<double>("CoolingRate")
                                        .HasColumnType("double precision");

                                    b2.Property<double>("InitialTemperature")
                                        .HasColumnType("double precision");

                                    b2.Property<int>("IterationsPerTemp")
                                        .HasColumnType("integer");

                                    b2.Property<double>("MinTemperature")
                                        .HasColumnType("double precision");

                                    b2.HasKey("TenantAlgorithmSettingsTenantSettingsId");

                                    b2.ToTable("tenant_settings");

                                    b2.WithOwner()
                                        .HasForeignKey("TenantAlgorithmSettingsTenantSettingsId");
                                });

                            b1.Navigation("AntColonyAlgorithmSettings")
                                .IsRequired();

                            b1.Navigation("GeneticAlgorithmSettings")
                                .IsRequired();

                            b1.Navigation("LoadBalancingAlgorithmSettings")
                                .IsRequired();

                            b1.Navigation("SimulatedAnnealingAlgorithmSettings")
                                .IsRequired();
                        });

                    b.Navigation("AlgorithmSettings")
                        .IsRequired();
                });

            modelBuilder.Entity("Nerbotix.Domain.Tenants.User", b =>
                {
                    b.HasOne("Nerbotix.Domain.Tenants.Tenant", "Tenant")
                        .WithMany("Users")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Nerbotix.Domain.Tenants.UserRole", b =>
                {
                    b.HasOne("Nerbotix.Domain.Tenants.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nerbotix.Domain.Tenants.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nerbotix.Domain.Tenants.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Tenant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Nerbotix.Domain.Capabilities.Capability", b =>
                {
                    b.Navigation("Robots");
                });

            modelBuilder.Entity("Nerbotix.Domain.Capabilities.CapabilityGroup", b =>
                {
                    b.Navigation("Capabilities");
                });

            modelBuilder.Entity("Nerbotix.Domain.Chatting.Chat", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Nerbotix.Domain.Robots.Robot", b =>
                {
                    b.Navigation("Capabilities");

                    b.Navigation("Communication")
                        .IsRequired();

                    b.Navigation("CustomProperties");

                    b.Navigation("Logs");

                    b.Navigation("Properties");

                    b.Navigation("TasksQueue");
                });

            modelBuilder.Entity("Nerbotix.Domain.Robots.RobotCategory", b =>
                {
                    b.Navigation("Properties");

                    b.Navigation("Robots");
                });

            modelBuilder.Entity("Nerbotix.Domain.Robots.RobotProperty", b =>
                {
                    b.Navigation("Values");
                });

            modelBuilder.Entity("Nerbotix.Domain.Tasks.RobotTask", b =>
                {
                    b.Navigation("Archive");

                    b.Navigation("Logs");

                    b.Navigation("Requirements");

                    b.Navigation("TaskData");
                });

            modelBuilder.Entity("Nerbotix.Domain.Tenants.Permission", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("Nerbotix.Domain.Tenants.PermissionGroup", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("Nerbotix.Domain.Tenants.Role", b =>
                {
                    b.Navigation("Permissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Nerbotix.Domain.Tenants.Tenant", b =>
                {
                    b.Navigation("Chats");

                    b.Navigation("PermissionGroups");

                    b.Navigation("Roles");

                    b.Navigation("Settings")
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Nerbotix.Domain.Tenants.User", b =>
                {
                    b.Navigation("Chats");

                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
